<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS递归闭包实现函数柯里化</title>
      <link href="/2019/09/04/curry/"/>
      <url>/2019/09/04/curry/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我博客的第一篇文章，对于函数柯里化的实现，为了完成add函数的柯里化，参考过了博主<a href="https://chenjx56.github.io/2019/09/03/js-zhi-han-shu-ke-li-hua/" target="_blank" rel="noopener">想</a>对于add函数柯里化的理解和讨论，下面我谈谈自己对add函数柯里化的理解和对他的代码部分的改进。</p><h2 id="根据实际需求需要柯里化的函数"><a href="#根据实际需求需要柯里化的函数" class="headerlink" title="根据实际需求需要柯里化的函数"></a>根据实际需求需要柯里化的函数</h2><pre class=" language-bash"><code class="language-bash">//原函数<span class="token keyword">function</span> add<span class="token punctuation">(</span>a,b,c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a+b+c<span class="token punctuation">;</span><span class="token punctuation">}</span>//正确调用add<span class="token punctuation">(</span>1,2,3<span class="token punctuation">)</span><span class="token punctuation">;</span>//返回6，结果不符合预期：8add<span class="token punctuation">(</span>1,2,3,4<span class="token punctuation">)</span><span class="token punctuation">;</span>//错误add<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数只能进行固定产生的累加计算，且必须传递三个产生才能实现累加，否存会产生错误，或者计算结果不符合要求。</p><h2 id="根据函数柯里化的定义简单柯里化的函数"><a href="#根据函数柯里化的定义简单柯里化的函数" class="headerlink" title="根据函数柯里化的定义简单柯里化的函数"></a>根据函数柯里化的定义简单柯里化的函数</h2><pre class=" language-bash"><code class="language-bash">//原函数<span class="token keyword">function</span> add<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> function<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a+b+c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//正确调用add<span class="token punctuation">(</span>1,2,3<span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span>//错误调用add<span class="token punctuation">(</span>1,2,3,4<span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">(</span>1,2<span class="token punctuation">)</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span><span class="token punctuation">(</span>4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre><p>对于该柯里化的实现，可以发现方法调用同样有局限性只能按照方法参数的定义格式来传递，且会遭遇原方法同样的只能限定参数的计算，比如这里只能计算3个数字相加，否则同样结果无效或出错。</p><h2 id="解决方案讨论"><a href="#解决方案讨论" class="headerlink" title="解决方案讨论"></a>解决方案讨论</h2><p>对于上述两个问题：<br>前者我们可以考虑通过arguments可变参数来解决参数个数必须确定的问题，但是如何在方法体中知道有多少个数要相加，所以这样不确定的表达式我们不可能实现，但是由于各个参数间的操作都是进行相加，即都是进行相同加法操作，所以我们可以考虑通过递归来实现不确定个数的参数的求和，但是仅仅通过递归和可变参数来实现，可能就仅仅结局了参数可变的问题，而函数柯里化却没有了。当参考了博主<a href="https://chenjx56.github.io/2019/09/03/js-zhi-han-shu-ke-li-hua/" target="_blank" rel="noopener">想</a>对该问题的实现，我知道了可以通过apply方法来通过递归将后面获得的产生push入参数数组来作为子调用的参数，来扩大子递归调用的参数数量，当某个子调用的参数达到需要计算的产生就回溯到最外层返回我们要的结果。</p><pre class=" language-bash"><code class="language-bash">//by https://chenjx56.github.io<span class="token keyword">function</span> add<span class="token punctuation">(</span>a, b, c, d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a + b + c + d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> FixeParmasCurry <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var _arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>.slice.call<span class="token punctuation">(</span>arguments, 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        var newArg <span class="token operator">=</span> _arg.concat<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>.slice.call<span class="token punctuation">(</span>arguments, 0<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fn.apply<span class="token punctuation">(</span>this, newArg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> Curry <span class="token punctuation">(</span>fn , length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var length <span class="token operator">=</span> length <span class="token operator">||</span> fn.length<span class="token punctuation">;</span>    <span class="token keyword">return</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        if<span class="token punctuation">(</span>arguments.length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>            var combined <span class="token operator">=</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span>.concat<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>.slice.call<span class="token punctuation">(</span>arguments, 0<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Curry<span class="token punctuation">(</span>FixeParmasCurry.apply<span class="token punctuation">(</span>this, combined<span class="token punctuation">)</span>, length - arguments.length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else <span class="token punctuation">{</span>            <span class="token keyword">return</span> fn.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="根据函数柯里化的定义柯里化的函数"><a href="#根据函数柯里化的定义柯里化的函数" class="headerlink" title="根据函数柯里化的定义柯里化的函数"></a>根据函数柯里化的定义柯里化的函数</h2><h3 id="算法内容优化改进"><a href="#算法内容优化改进" class="headerlink" title="算法内容优化改进"></a>算法内容优化改进</h3><p>对于博主<a href="https://chenjx56.github.io/2019/09/03/js-zhi-han-shu-ke-li-hua/" target="_blank" rel="noopener">想</a>的算法，我发现了代码上的一些问题，问题不是bug，而是代码有可简化的空间，递归解决的就是可以减低算法的难度，把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量，通过下面的代码实现了上述代码的简化。</p><pre class=" language-bash"><code class="language-bash">//自动函数柯里化<span class="token keyword">function</span> curry<span class="token punctuation">(</span>fun,args<span class="token punctuation">)</span><span class="token punctuation">{</span>    //获取fun参数列表的参数个数    var funa<span class="token operator">=</span>fun.length<span class="token punctuation">;</span>    //    var args <span class="token operator">=</span> args <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //arguments.slice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>.slice.call<span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        //_args.push<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span>.push.apply<span class="token punctuation">(</span>_args,args<span class="token punctuation">)</span><span class="token punctuation">;</span>        //参数不够继续收集        if<span class="token punctuation">(</span>_args.length <span class="token operator">&lt;</span> funa<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> curry.call<span class="token punctuation">(</span>this,fun,_args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //需要的参数和得到的参数相等，结束递归        //this-<span class="token operator">></span>windows        <span class="token keyword">return</span> fun.apply<span class="token punctuation">(</span>this, fun,_args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在柯里化的实现中，虽然具有了更多的自由度，但同时柯里化通用式里调用了arguments对象，使用了递归与闭包，因此柯里化的自由度是以牺牲了一定的性能为代价换来的。所以我们在完成一般的函数问题的时候，没有特殊的功能需求，尽量不要函数柯里化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/03/hello-world/"/>
      <url>/2019/09/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>W欢迎 to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hellp-HEXO"><a href="#Hellp-HEXO" class="headerlink" title="Hellp HEXO"></a>Hellp HEXO</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
